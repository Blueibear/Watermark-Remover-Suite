name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint (Ruff & Black)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff

      - name: Run Ruff
        run: ruff check .

      - name: Run Black
        run: black --check --diff .

  test-cpu:
    name: Test Python ${{ matrix.python-version }} (CPU)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsm6 libxext6

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ffmpeg

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ffmpeg

      - name: Install package with dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[develop]"

      - name: Run tests
        run: |
          pytest tests/ -v --tb=short --durations=10

      - name: Test CLI help
        run: |
          wmr --help
          wmr image --help
          wmr video --help

      - name: Run smoke tests
        run: |
          pytest tests/test_smoke_video.py -v

  test-optional-backends:
    name: Test Optional Backends (Python 3.11, Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsm6 libxext6

      - name: Install package with optional dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[develop,onx]"

      - name: Test with ONNX backend
        run: |
          pytest tests/test_watermark_remover_mvp.py -v -k "test_process_image"

  test-gpu:
    name: Test GPU (CUDA, Python 3.11)
    runs-on: ubuntu-latest
    # Only run on labeled PRs or manual trigger
    if: |
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'test-gpu')) ||
      github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install CUDA toolkit
        uses: Jimver/cuda-toolkit@v0.2.14
        with:
          cuda: '12.1.0'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsm6 libxext6

      - name: Install package with GPU dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121
          pip install -e ".[develop,sd,onx]"

      - name: Verify CUDA availability
        run: |
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          python -c "import torch; print(f'CUDA devices: {torch.cuda.device_count()}')"

      - name: Run GPU tests
        run: |
          pytest tests/test_watermark_remover_mvp.py -v

  build-package:
    name: Build & Verify Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Test installation from wheel
        run: |
          pip install dist/*.whl
          wmr --help

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  install-test:
    name: Test Installation Methods
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Test pip install (editable)
        run: |
          pip install -e .
          wmr --help

      - name: Test pipx install
        run: |
          pip install pipx
          pipx install .
          pipx run wmr --help

      - name: Verify model download script
        run: |
          python -m watermark_remover.models.download_models --list
